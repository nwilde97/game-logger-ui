import {createAsyncThunk, createSlice, PayloadAction} from '@reduxjs/toolkit';
import {RootState} from './store';
import {ItemTree} from "../model/item";
import {fetchItemTree} from "../services/item.service";

export interface Itemstate {
  items?: ItemTree;
  status: 'initial' | 'success' | 'loading' | 'failed';
}

const initialState: Itemstate = {
    status: 'initial',
};

export const fetchItemList = createAsyncThunk('fetchItemList', async (_, { rejectWithValue } ) => {
    try {
        const items = await fetchItemTree();
        return items;
    } catch(e) {
        rejectWithValue(e);
    }
});


const slice = createSlice({
    name: 'items',
    initialState,
    // The `reducers` field lets us define reducers and generate associated actions
    reducers: {
        setItems: (state, action: PayloadAction<ItemTree>) => {
            state.items = action.payload;
            state.status = 'success';
        }
    },
    // The `extraReducers` field lets the slice handle actions defined elsewhere,
    // including actions generated by createAsyncThunk or in other slices.
    extraReducers: (builder) => {
        builder
            .addCase(fetchItemList.pending, (state)=> {
                state.status = 'loading';
            })
            .addCase(fetchItemList.rejected, (state, { error }) => {
                console.log(error);
                state.status = 'failed';
            })
            .addCase(fetchItemList.fulfilled, (state, action: PayloadAction<ItemTree | undefined>) => {
                state.items = action.payload!;
                state.status = 'success';
            })
    },
});

export const { setItems } = slice.actions;

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
export const selectItems = (state: RootState) => state.items.items;
export const getItemLoadingState = (state: RootState) => state.items.status;

export default slice.reducer;
