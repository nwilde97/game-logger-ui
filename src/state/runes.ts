import {createAsyncThunk, createSlice, PayloadAction} from '@reduxjs/toolkit';
import {RootState} from './store';
import {RuneTree} from "../model/rune";
import {query} from "../services/graphql.service";

export interface RuneState {
  runes?: RuneTree[];
  status: 'initial' | 'success' | 'loading' | 'failed';
}

const initialState: RuneState = {
    status: 'initial',
};

export const fetchRuneList = createAsyncThunk('fetchRuneList', async (_, { rejectWithValue } ) => {
    try {
        const runes = await query({
          query: `
{
  getRunes{
   id
    name
    imageUrl
    keystones {
      id
      name
      imageUrl
    }
    runes {
      id
      name
      imageUrl
    }
    mods {
      id
      name
      imageUrl
    }
  }
}
      `
        });
        return runes.getRunes;
    } catch(e) {
        rejectWithValue(e);
    }
});


const slice = createSlice({
    name: 'runes',
    initialState,
    // The `reducers` field lets us define reducers and generate associated actions
    reducers: {
        setRunes: (state, action: PayloadAction<RuneTree[]>) => {
            state.runes = action.payload;
            state.status = 'success';
        }
    },
    // The `extraReducers` field lets the slice handle actions defined elsewhere,
    // including actions generated by createAsyncThunk or in other slices.
    extraReducers: (builder) => {
        builder
            .addCase(fetchRuneList.pending, (state)=> {
                state.status = 'loading';
            })
            .addCase(fetchRuneList.rejected, (state, { error }) => {
                console.log(error);
                state.status = 'failed';
            })
            .addCase(fetchRuneList.fulfilled, (state, action: PayloadAction<RuneTree[] | undefined>) => {
                state.runes = action.payload!;
                state.status = 'success';
            })
    },
});

export const { setRunes } = slice.actions;

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
export const selectRunes = (state: RootState) => state.runes.runes;
export const getRuneLoadingState = (state: RootState) => state.runes.status;

export default slice.reducer;
